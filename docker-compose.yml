version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vpn-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vpn_bot
      POSTGRES_USER: vpn_bot_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vpn_bot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - vpn-bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vpn_bot_user -d vpn_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: vpn-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - vpn-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VPN Bot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vpn-bot-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-vpn_bot}
      DB_USER: ${DB_USER:-vpn_bot_user}
      DB_PASSWORD: ${DB_PASSWORD:-vpn_bot_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_SECRET: ${TELEGRAM_WEBHOOK_SECRET}
      ADMIN_TELEGRAM_IDS: ${ADMIN_TELEGRAM_IDS}
      ZARINPAL_MERCHANT_ID: ${ZARINPAL_MERCHANT_ID}
      ZARINPAL_CALLBACK_URL: ${ZARINPAL_CALLBACK_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vpn-bot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VPN Bot Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vpn-bot-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000/api}
      REACT_APP_APP_NAME: ${REACT_APP_APP_NAME:-VPN Bot}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - vpn-bot-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vpn-bot-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./frontend/build:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - vpn-bot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: vpn-bot-certbot
    restart: unless-stopped
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - vpn-bot-network

  # PM2 Process Manager
  pm2:
    image: keymetrics/pm2:latest
    container_name: vpn-bot-pm2
    restart: unless-stopped
    environment:
      PM2_PUBLIC_KEY: ${PM2_PUBLIC_KEY}
      PM2_SECRET_KEY: ${PM2_SECRET_KEY}
    volumes:
      - ./ecosystem.config.js:/app/ecosystem.config.js
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "9615:9615"
    depends_on:
      - backend
    networks:
      - vpn-bot-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vpn-bot-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vpn-bot-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vpn-bot-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - vpn-bot-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: vpn-bot-backup
    restart: "no"
    environment:
      POSTGRES_DB: vpn_bot
      POSTGRES_USER: vpn_bot_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vpn_bot_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - vpn-bot-network
    command: sh -c "sleep 10 && sh /backup.sh"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vpn-bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
