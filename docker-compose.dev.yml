version: '3.8'

services:
  # Development Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    environment:
      NODE_ENV: development
      DEBUG: vpn-bot:*
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugger
    command: npm run dev

  # Development Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3001:3001"
    command: npm start

  # Development Database
  postgres:
    environment:
      POSTGRES_DB: vpn_bot_dev
      POSTGRES_USER: vpn_bot_user
      POSTGRES_PASSWORD: vpn_bot_password_dev
    ports:
      - "5433:5432"  # Different port for dev

  # Development Redis
  redis:
    ports:
      - "6380:6379"  # Different port for dev

  # Development Nginx
  nginx:
    ports:
      - "8080:80"   # Different port for dev
      - "8443:443"  # Different port for dev

  # Development Monitoring
  prometheus:
    ports:
      - "9091:9090"  # Different port for dev

  grafana:
    ports:
      - "3003:3000"  # Different port for dev

  # Development PM2
  pm2:
    ports:
      - "9616:9615"  # Different port for dev

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: vpn-bot-adminer-dev
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - vpn-bot-network

  # Redis Commander for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vpn-bot-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - vpn-bot-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: vpn-bot-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - vpn-bot-network

  # Localstack for AWS services testing
  localstack:
    image: localstack/localstack:latest
    container_name: vpn-bot-localstack-dev
    restart: unless-stopped
    environment:
      SERVICES: s3,sqs,sns
      DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      DEBUG: 1
    ports:
      - "4566:4566"
    volumes:
      - ./localstack:/tmp/localstack
    networks:
      - vpn-bot-network

  # MinIO for S3-compatible storage testing
  minio:
    image: minio/minio:latest
    container_name: vpn-bot-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio:/data
    command: server /data --console-address ":9001"
    networks:
      - vpn-bot-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: vpn-bot-jaeger-dev
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    networks:
      - vpn-bot-network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: vpn-bot-elasticsearch-dev
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data
    networks:
      - vpn-bot-network

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: vpn-bot-kibana-dev
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - vpn-bot-network

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: vpn-bot-filebeat-dev
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/vpn-bot:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - elasticsearch
    networks:
      - vpn-bot-network

  # Development backup service
  backup:
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: vpn_bot_dev
      DB_USER: vpn_bot_user
      DB_PASSWORD: vpn_bot_password_dev

networks:
  vpn-bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
